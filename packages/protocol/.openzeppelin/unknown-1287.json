{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x5FA22F9FcAC7B28dE87fc0f72B674320FD15149B",
      "txHash": "0xf7da4fe4e0ae49ce92b460d05385ef0c9f6eebeba090b0239281e9f3f05f0e29",
      "kind": "transparent"
    },
    {
      "address": "0x29BCC38E355551d6C280713972cb88a9AE789C94",
      "txHash": "0x14a06d81d78e82d598ab6273ab99b334fd994ae04c3f85d541868718dbf43dbd",
      "kind": "transparent"
    },
    {
      "address": "0x8038685155b034c8E60567C768D4171DF3ed4427",
      "txHash": "0x51b971c030c03424bbf01ddb1ee14b13f53774614a5b4c404467ec0b4da220e3",
      "kind": "transparent"
    },
    {
      "address": "0x7e277bB31c0A288ac34c851D0A0DcDAC928BB1BC",
      "txHash": "0xac90311988119c1ba09dd68280f3c0f7fe36f9035f2e9b340c25f33cc48ec48e",
      "kind": "transparent"
    },
    {
      "address": "0x1d04d8f8980887426a51Ce80bAB4341757EbB17d",
      "txHash": "0xacd9ecc6aab95c79c310ef03ca875d7ac821236becdf881456827e7ba31f308c",
      "kind": "transparent"
    },
    {
      "address": "0x379855536dcD9fbE78f249e75e0149094D068356",
      "txHash": "0xf66437e0588c2767060fa14e9f194365b312d5f4a0a67247124eb2ec85db4305",
      "kind": "transparent"
    },
    {
      "address": "0xeD785942bcC7c0E8Ae0E444d8B212F2B3e662e7c",
      "txHash": "0x249966ac95672a143e63d4bc0b739d9ea8219fb23f7d404d7d51baaa13bd3c2b",
      "kind": "transparent"
    },
    {
      "address": "0x9230541a0F7138aF9fecD57801Bab11228233b0f",
      "txHash": "0xcc082bb5ee5e038eea4345a32fd7f108ba421d58cff97ec62292bfa3475addf9",
      "kind": "transparent"
    },
    {
      "address": "0x8d10105da65A6e933789c157BD82B9342C37caCc",
      "txHash": "0xa0dd39d35e6eecf0eff642ad6a896f2c24719b21f976f4a32128540c66d5d198",
      "kind": "transparent"
    },
    {
      "address": "0xd2240De22eEb7626BB824fb44F06263eE8033407",
      "txHash": "0xe7e56272588c40cd9fd779892c4b2c26a3b1b6d1ecac8cbc86e1bbdb7bad999f",
      "kind": "transparent"
    },
    {
      "address": "0xeAb0a2E96BB1e863F9Ddf126f5346294443448Be",
      "txHash": "0xd50a4c985eddd53a06e40779356d06a36aec31c98be132bf8830498c6717de6e",
      "kind": "transparent"
    },
    {
      "address": "0x7c99CBEaBcC88d00b3f3a4679c3BC54E0db66996",
      "txHash": "0xbb403cb7f32352053f64fd19b3dd98332f8bb0a1b4762866c69071644fbfd2e3",
      "kind": "transparent"
    },
    {
      "address": "0xcf708F3806C9a655d753054bEAc318bbdD685931",
      "txHash": "0x6668526feef68f46c982eb9e2d7dd1ef4ad187fe9ea840024fe4a9f8879195d3",
      "kind": "transparent"
    },
    {
      "address": "0x5D4e40b7e5C278155757E6C2807A2a2340A1afc9",
      "txHash": "0x37284560268874f35584ad81a0af736750a315a1245a6d28226fa57535b47e8e",
      "kind": "transparent"
    },
    {
      "address": "0xf08d73d7Ba5e81bab335585149f8a3e98fC51Bb9",
      "txHash": "0x8eec7e972222785da3b4ee783e04fcefb7f891993aa9308570250987e9c73b23",
      "kind": "transparent"
    }
  ],
  "impls": {
    "4b873d2431626e7b8b7f25c801720314173fafdabde488a547130bb1da3f4c00": {
      "address": "0x6A7041870BBC2Ea4A192C2f53c0B0EFeE2e76476",
      "txHash": "0xc9fe6bfcab9e3bba007949156a96cc2f1d209e746eb73d88089e02b368f33be7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ERC20BurnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol:50"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC20PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol:39"
          },
          {
            "contract": "ERC20PresetMinterPauserUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/presets/ERC20PresetMinterPauser.sol:106"
          },
          {
            "contract": "Fidu",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Fidu.sol:21"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "56564fc6ff18a62c8509ace4ea7cebd77dc4b8801d6e4dfbf619ae0b8376cab2": {
      "address": "0xb9D0B24E24cfb893F2AaBf8968f864dd77B632Bf",
      "txHash": "0x17707b3ba19c18a39b11e4e3fb6a908728a4124245a1033fefa023f32daa9fe1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "PoolTokens",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/PoolTokens.sol:19"
          },
          {
            "contract": "PoolTokens",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(TokenInfo)10238_storage)",
            "src": "contracts/protocol/core/PoolTokens.sol:29"
          },
          {
            "contract": "PoolTokens",
            "label": "pools",
            "type": "t_mapping(t_address,t_struct(PoolInfo)20088_storage)",
            "src": "contracts/protocol/core/PoolTokens.sol:31"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(TokenInfo)10238_storage)": {
            "label": "mapping(uint256 => struct IPoolTokens.TokenInfo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(TokenInfo)10238_storage": {
            "label": "struct IPoolTokens.TokenInfo",
            "members": [
              {
                "label": "pool",
                "type": "t_address"
              },
              {
                "label": "tranche",
                "type": "t_uint256"
              },
              {
                "label": "principalAmount",
                "type": "t_uint256"
              },
              {
                "label": "principalRedeemed",
                "type": "t_uint256"
              },
              {
                "label": "interestRedeemed",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(PoolInfo)20088_storage)": {
            "label": "mapping(address => struct PoolTokens.PoolInfo)"
          },
          "t_struct(PoolInfo)20088_storage": {
            "label": "struct PoolTokens.PoolInfo",
            "members": [
              {
                "label": "totalMinted",
                "type": "t_uint256"
              },
              {
                "label": "totalPrincipalRedeemed",
                "type": "t_uint256"
              },
              {
                "label": "created",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "576e96714aceba3f49693bea6316615bc91fa7d4f23f0db0a47626cf18e29cc5": {
      "address": "0x351abfE72943631ed73181c0c416f70e3CCC31CA",
      "txHash": "0x8714bcc4b5cc89050c5f002b622fa5bc07b33ef87bacf79a919716a7a820ffaf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:28"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "poolTokenPositions",
            "type": "t_mapping(t_uint256,t_struct(PoolTokenPosition)27838_storage)",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:43"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "fiduPositions",
            "type": "t_mapping(t_uint256,t_struct(FiduPosition)27843_storage)",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:45"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(PoolTokenPosition)27838_storage)": {
            "label": "mapping(uint256 => struct TransferRestrictedVault.PoolTokenPosition)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(PoolTokenPosition)27838_storage": {
            "label": "struct TransferRestrictedVault.PoolTokenPosition",
            "members": [
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(FiduPosition)27843_storage)": {
            "label": "mapping(uint256 => struct TransferRestrictedVault.FiduPosition)"
          },
          "t_struct(FiduPosition)27843_storage": {
            "label": "struct TransferRestrictedVault.FiduPosition",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "b2b815dc93c70a6c323d2941b6c5dbe6a27c77e90e9d7d0de21a65e4b05a4831": {
      "address": "0x892b71822728d638435EeAC01c0E3aa863D15afB",
      "txHash": "0x2b60baf23d6a2ffbe2d77888d9788e64545cf9216892f42e3d0777999f64ff0b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "IPool",
            "label": "sharePrice",
            "type": "t_uint256",
            "src": "contracts/interfaces/IPool.sol:7"
          },
          {
            "contract": "Pool",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Pool.sol:17"
          },
          {
            "contract": "Pool",
            "label": "compoundBalance",
            "type": "t_uint256",
            "src": "contracts/protocol/core/Pool.sol:20"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "b46560c63153afaefd87043d53e23608a4639167b4b353bb4daabc1af55f18c0": {
      "address": "0x22a06cbb3B3B45F058a5F32d71CEF27114a5FBfb",
      "txHash": "0x84a56167c0615c5a46f37599c39c3f7454011fb281c503ba743a97ab5c2f60ba",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "ICreditDesk",
            "label": "totalWritedowns",
            "type": "t_uint256",
            "src": "contracts/interfaces/ICreditDesk.sol:7"
          },
          {
            "contract": "ICreditDesk",
            "label": "totalLoansOutstanding",
            "type": "t_uint256",
            "src": "contracts/interfaces/ICreditDesk.sol:8"
          },
          {
            "contract": "CreditDesk",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/CreditDesk.sol:23"
          },
          {
            "contract": "CreditDesk",
            "label": "underwriters",
            "type": "t_mapping(t_address,t_struct(Underwriter)13028_storage)",
            "src": "contracts/protocol/core/CreditDesk.sol:47"
          },
          {
            "contract": "CreditDesk",
            "label": "borrowers",
            "type": "t_mapping(t_address,t_struct(Borrower)13032_storage)",
            "src": "contracts/protocol/core/CreditDesk.sol:48"
          },
          {
            "contract": "CreditDesk",
            "label": "creditLines",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/protocol/core/CreditDesk.sol:49"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_address,t_struct(Underwriter)13028_storage)": {
            "label": "mapping(address => struct CreditDesk.Underwriter)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Underwriter)13028_storage": {
            "label": "struct CreditDesk.Underwriter",
            "members": [
              {
                "label": "governanceLimit",
                "type": "t_uint256"
              },
              {
                "label": "creditLines",
                "type": "t_array(t_address)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_struct(Borrower)13032_storage)": {
            "label": "mapping(address => struct CreditDesk.Borrower)"
          },
          "t_struct(Borrower)13032_storage": {
            "label": "struct CreditDesk.Borrower",
            "members": [
              {
                "label": "creditLines",
                "type": "t_array(t_address)dyn_storage"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "d49de6dc28127533beceed8a3a3bc9a2e5f409be3d0d691f95b0d4f7a05d4bcb": {
      "address": "0x171529D6Ae236D13A686543626899Dbb6F8EDf36",
      "txHash": "0xe7fe4cf209955526fdb1713d8778118590b195ec242f285883ba3a4e516b79c8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "ISeniorPool",
            "label": "sharePrice",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:9"
          },
          {
            "contract": "ISeniorPool",
            "label": "totalLoansOutstanding",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:10"
          },
          {
            "contract": "ISeniorPool",
            "label": "totalWritedowns",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:11"
          },
          {
            "contract": "SeniorPool",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/SeniorPool.sol:22"
          },
          {
            "contract": "SeniorPool",
            "label": "compoundBalance",
            "type": "t_uint256",
            "src": "contracts/protocol/core/SeniorPool.sol:28"
          },
          {
            "contract": "SeniorPool",
            "label": "writedowns",
            "type": "t_mapping(t_contract(ITranchedPool)10674,t_uint256)",
            "src": "contracts/protocol/core/SeniorPool.sol:29"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(ITranchedPool)10674,t_uint256)": {
            "label": "mapping(contract ITranchedPool => uint256)"
          },
          "t_contract(ITranchedPool)10674": {
            "label": "contract ITranchedPool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "2a132555a31f8d77526933591abc33e530407f40bb2e0e93bc53f57685ea1b7c": {
      "address": "0x4B0d8F5c61eCDFb0e4Ab191CD6444E85C8B03cdb",
      "txHash": "0xee4144cf307db4c5ba35a2d3834ea2d3313a3ef51b147ab8ff90b7aea8ddfafd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "GoldfinchFactory",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/GoldfinchFactory.sol:20"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "0b2fe474811748d6a77a1dc203b70f1d340ffdcff2c0957379e2e510e97d68ce": {
      "address": "0x2A04B30B8F3c8E273C2f70372F3f432d883C62A9",
      "txHash": "0xd76193172e31a9b31de5c4aa99e93d3253ce4da1df03331cd66dbae005a8b668",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StakingRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/rewards/StakingRewards.sol:87"
          },
          {
            "contract": "StakingRewards",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:90"
          },
          {
            "contract": "StakingRewards",
            "label": "accumulatedRewardsPerToken",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:93"
          },
          {
            "contract": "StakingRewards",
            "label": "rewardsAvailable",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:96"
          },
          {
            "contract": "StakingRewards",
            "label": "positionToAccumulatedRewardsPerToken",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:99"
          },
          {
            "contract": "StakingRewards",
            "label": "targetCapacity",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:103"
          },
          {
            "contract": "StakingRewards",
            "label": "minRate",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:106"
          },
          {
            "contract": "StakingRewards",
            "label": "maxRate",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:109"
          },
          {
            "contract": "StakingRewards",
            "label": "maxRateAtPercent",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:113"
          },
          {
            "contract": "StakingRewards",
            "label": "minRateAtPercent",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:117"
          },
          {
            "contract": "StakingRewards",
            "label": "vestingLength",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:120"
          },
          {
            "contract": "StakingRewards",
            "label": "totalStakedSupply",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:128"
          },
          {
            "contract": "StakingRewards",
            "label": "totalLeveragedStakedSupply",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:131"
          },
          {
            "contract": "StakingRewards",
            "label": "leverageMultipliers",
            "type": "t_mapping(t_enum(LockupPeriod)32547,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:134"
          },
          {
            "contract": "StakingRewards",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(StakedPosition)32565_storage)",
            "src": "contracts/rewards/StakingRewards.sol:137"
          },
          {
            "contract": "StakingRewards",
            "label": "effectiveMultipliers",
            "type": "t_mapping(t_enum(StakedPositionType)32550,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:141"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_enum(LockupPeriod)32547,t_uint256)": {
            "label": "mapping(enum StakingRewards.LockupPeriod => uint256)"
          },
          "t_enum(LockupPeriod)32547": {
            "label": "enum StakingRewards.LockupPeriod",
            "members": [
              "SixMonths",
              "TwelveMonths",
              "TwentyFourMonths"
            ]
          },
          "t_mapping(t_uint256,t_struct(StakedPosition)32565_storage)": {
            "label": "mapping(uint256 => struct StakingRewards.StakedPosition)"
          },
          "t_struct(StakedPosition)32565_storage": {
            "label": "struct StakingRewards.StakedPosition",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewards",
                "type": "t_struct(Rewards)11256_storage"
              },
              {
                "label": "leverageMultiplier",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              },
              {
                "label": "positionType",
                "type": "t_enum(StakedPositionType)32550"
              },
              {
                "label": "unsafeEffectiveMultiplier",
                "type": "t_uint256"
              },
              {
                "label": "unsafeBaseTokenExchangeRate",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Rewards)11256_storage": {
            "label": "struct StakingRewardsVesting.Rewards",
            "members": [
              {
                "label": "totalUnvested",
                "type": "t_uint256"
              },
              {
                "label": "totalVested",
                "type": "t_uint256"
              },
              {
                "label": "totalPreviouslyVested",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(StakedPositionType)32550": {
            "label": "enum StakingRewards.StakedPositionType",
            "members": [
              "Fidu",
              "CurveLP"
            ]
          },
          "t_mapping(t_enum(StakedPositionType)32550,t_uint256)": {
            "label": "mapping(enum StakingRewards.StakedPositionType => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "d57f23e97608988f68b0180cd473f276f1d55a804a264b24d7ac06562d3ab346": {
      "address": "0x3d1aC2EB14ca079C5a00A66C2b24aEc4b0FbAD31",
      "txHash": "0x76f5223808ae3af30e128501a5dbf83e64d5b52daa9d8341f331c284d1134dd3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CommunityRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/rewards/CommunityRewards.sol:33"
          },
          {
            "contract": "CommunityRewards",
            "label": "rewardsAvailable",
            "type": "t_uint256",
            "src": "contracts/rewards/CommunityRewards.sol:36"
          },
          {
            "contract": "CommunityRewards",
            "label": "tokenLaunchTimeInSeconds",
            "type": "t_uint256",
            "src": "contracts/rewards/CommunityRewards.sol:39"
          },
          {
            "contract": "CommunityRewards",
            "label": "grants",
            "type": "t_mapping(t_uint256,t_struct(Rewards)10882_storage)",
            "src": "contracts/rewards/CommunityRewards.sol:42"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Rewards)10882_storage)": {
            "label": "mapping(uint256 => struct CommunityRewardsVesting.Rewards)"
          },
          "t_struct(Rewards)10882_storage": {
            "label": "struct CommunityRewardsVesting.Rewards",
            "members": [
              {
                "label": "totalGranted",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "cliffLength",
                "type": "t_uint256"
              },
              {
                "label": "vestingInterval",
                "type": "t_uint256"
              },
              {
                "label": "revokedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "5c0e1824808aec6e4f16ff9ed8f3086c7fc9b7e7e192f39197e9ca2b63e57380": {
      "address": "0xc83579DDc6B35895d49D54dc2B3A0d9611879a94",
      "txHash": "0x86d8601595c00898ee55d3f63efdea7106786a82799b5533dcb115f44038e5a8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "gfi",
            "type": "t_address",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:15"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:16"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "acceptedBitMap",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "a5477a5839e6b7e5ea32c3e4448678bd1e0abb689b48ae84d2e9de4dc6df1510": {
      "address": "0x280036BC47De0118deE44F8888aeA45159E02Daa",
      "txHash": "0xb7b814b32400c7ad1512515866dd4ec4b0dd7521a4e855b410c64951033073ae",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3395_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155PresetPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/external/ERC1155PresetPauserUpgradeable.sol:113"
          },
          {
            "contract": "UniqueIdentity",
            "label": "nonces",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/protocol/core/UniqueIdentity.sol:35"
          },
          {
            "contract": "UniqueIdentity",
            "label": "supportedUIDTypes",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/protocol/core/UniqueIdentity.sol:36"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3395_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)3395_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3094_storage"
              }
            ]
          },
          "t_struct(Set)3094_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "68d43777ded85e394a5949485264cf31b27d24d744d9c4048ff5f5bb2c9ccb42": {
      "address": "0xF5854e33c71375F8731fCD61cFBc5DD64AE3ac89",
      "txHash": "0x530e7fe4aaa5e4a270a5854660b7cb9368806f59a7901ad32c02295932065c0c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "Go",
            "label": "uniqueIdentity",
            "type": "t_address",
            "src": "contracts/protocol/core/Go.sol:16"
          },
          {
            "contract": "Go",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Go.sol:20"
          },
          {
            "contract": "Go",
            "label": "legacyGoList",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Go.sol:23"
          },
          {
            "contract": "Go",
            "label": "allIdTypes",
            "type": "t_array(t_uint256)11_storage",
            "src": "contracts/protocol/core/Go.sol:24"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)11_storage": {
            "label": "uint256[11]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "af0ea0a45900b8be8be2a88ad38012b8d35616a91c13e0a725a8019cc54eccff": {
      "address": "0x95719261404A9302f27E81E9BA93B30768eeD980",
      "txHash": "0x4c564c80b60eabd757a7b842a29876970e97f1c1fa018313d7d78cdfe3ac631f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "BackerRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/rewards/BackerRewards.sol:35"
          },
          {
            "contract": "BackerRewards",
            "label": "totalRewards",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:109"
          },
          {
            "contract": "BackerRewards",
            "label": "maxInterestDollarsEligible",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:112"
          },
          {
            "contract": "BackerRewards",
            "label": "totalInterestReceived",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:115"
          },
          {
            "contract": "BackerRewards",
            "label": "totalRewardPercentOfTotalGFI",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:118"
          },
          {
            "contract": "BackerRewards",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)29401_storage)",
            "src": "contracts/rewards/BackerRewards.sol:121"
          },
          {
            "contract": "BackerRewards",
            "label": "pools",
            "type": "t_mapping(t_address,t_struct(BackerRewardsInfo)29396_storage)",
            "src": "contracts/rewards/BackerRewards.sol:124"
          },
          {
            "contract": "BackerRewards",
            "label": "poolStakingRewards",
            "type": "t_mapping(t_contract(ITranchedPool)10674,t_struct(StakingRewardsPoolInfo)29409_storage)",
            "src": "contracts/rewards/BackerRewards.sol:127"
          },
          {
            "contract": "BackerRewards",
            "label": "tokenStakingRewards",
            "type": "t_mapping(t_uint256,t_struct(StakingRewardsTokenInfo)29423_storage)",
            "src": "contracts/rewards/BackerRewards.sol:130"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)29401_storage)": {
            "label": "mapping(uint256 => struct BackerRewards.BackerRewardsTokenInfo)"
          },
          "t_struct(BackerRewardsTokenInfo)29401_storage": {
            "label": "struct BackerRewards.BackerRewardsTokenInfo",
            "members": [
              {
                "label": "rewardsClaimed",
                "type": "t_uint256"
              },
              {
                "label": "accRewardsPerPrincipalDollarAtMint",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(BackerRewardsInfo)29396_storage)": {
            "label": "mapping(address => struct BackerRewards.BackerRewardsInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(BackerRewardsInfo)29396_storage": {
            "label": "struct BackerRewards.BackerRewardsInfo",
            "members": [
              {
                "label": "accRewardsPerPrincipalDollar",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_contract(ITranchedPool)10674,t_struct(StakingRewardsPoolInfo)29409_storage)": {
            "label": "mapping(contract ITranchedPool => struct BackerRewards.StakingRewardsPoolInfo)"
          },
          "t_contract(ITranchedPool)10674": {
            "label": "contract ITranchedPool"
          },
          "t_struct(StakingRewardsPoolInfo)29409_storage": {
            "label": "struct BackerRewards.StakingRewardsPoolInfo",
            "members": [
              {
                "label": "accumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "lastUpdateTime",
                "type": "t_uint256"
              },
              {
                "label": "slicesInfo",
                "type": "t_array(t_struct(StakingRewardsSliceInfo)29420_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(StakingRewardsSliceInfo)29420_storage)dyn_storage": {
            "label": "struct BackerRewards.StakingRewardsSliceInfo[]"
          },
          "t_struct(StakingRewardsSliceInfo)29420_storage": {
            "label": "struct BackerRewards.StakingRewardsSliceInfo",
            "members": [
              {
                "label": "fiduSharePriceAtDrawdown",
                "type": "t_uint256"
              },
              {
                "label": "principalDeployedAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "accumulatedRewardsPerTokenAtDrawdown",
                "type": "t_uint256"
              },
              {
                "label": "accumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(StakingRewardsTokenInfo)29423_storage)": {
            "label": "mapping(uint256 => struct BackerRewards.StakingRewardsTokenInfo)"
          },
          "t_struct(StakingRewardsTokenInfo)29423_storage": {
            "label": "struct BackerRewards.StakingRewardsTokenInfo",
            "members": [
              {
                "label": "accumulatedRewardsPerTokenAtLastWithdraw",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "77bb60df5464b6ddc6ed1b8f105fc37478238795643b4f4b081c894e53f04516": {
      "address": "0x3bD0618fD99Dc141eC51aF241bee32Bd86694538",
      "txHash": "0x32665c9d292c33e91dbfa55ca783b4946bc4fba0e45a926b6981f8915f625120",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "Zapper",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17591",
            "src": "contracts/protocol/core/Zapper.sol:22"
          },
          {
            "contract": "Zapper",
            "label": "tranchedPoolZaps",
            "type": "t_mapping(t_uint256,t_struct(Zap)26245_storage)",
            "src": "contracts/protocol/core/Zapper.sol:32"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17591": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(Zap)26245_storage)": {
            "label": "mapping(uint256 => struct Zapper.Zap)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Zap)26245_storage": {
            "label": "struct Zapper.Zap",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "stakingPositionId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    }
  }
}
