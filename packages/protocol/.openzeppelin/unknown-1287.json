{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xaaF12a7ac3be931b8081F919FDb7437ED74aB9a6",
      "txHash": "0x80ff8a972f429e165c02b9c1cd9226768c847e886e179f1af7c8a571a6d51bae",
      "kind": "transparent"
    },
    {
      "address": "0x9a833dC029f3596e796729b95d24f7f18996e295",
      "txHash": "0xfe572f6353b516a67517bca44948891c5e7ed88eb75d5f052de06f661faf3177",
      "kind": "transparent"
    },
    {
      "address": "0xcA63750d76Cf9317966039e76C9B93557EBda710",
      "txHash": "0x03cd58394b8d2a3e348fbade730d0b4c2faa7d0f4170fb86334ac173b65c8760",
      "kind": "transparent"
    },
    {
      "address": "0x0AF6a2Fd74014Cc10BEF6B4B9f072E9A783994e0",
      "txHash": "0x258e13b28eee4e96eb4896d6f8fcd405d0a368995d0126a0977809d507ca1d95",
      "kind": "transparent"
    },
    {
      "address": "0x489c353eF239E77B2a5FC2a88e6C135E0097B58C",
      "txHash": "0x728c8c81979aa6e0fb627ba9c4b6827541c1f872ee36a579b730774fa48fed4c",
      "kind": "transparent"
    },
    {
      "address": "0xdfbdE51C5Ef37Ef6AEbFcc60A02BAE505F5198D5",
      "txHash": "0x647284d0a9724174fe1a3a8183715ae67ac0f73fdea40d835dff2a318fa77a84",
      "kind": "transparent"
    },
    {
      "address": "0x3273541dAE6692C66AE6A41A74618b54c6d28f94",
      "txHash": "0xf2156cf36b5975441b5bfbf723a738c6166b3ee83d93a394989a49018d117a57",
      "kind": "transparent"
    },
    {
      "address": "0xf1a518fAA57463F3BB187a21491c2d080D95dC08",
      "txHash": "0x1f26dafd3a7df6d5b15538af614fd63789246cfa4e10f2b14aaa72b08d1f90c1",
      "kind": "transparent"
    },
    {
      "address": "0x95BF269e1Ae1E1f3d91De277a624eA950e26a1E7",
      "txHash": "0xd91426ab8b097b74d27672d8c94c9bc39ce22fd184a8045a042c8049401165b2",
      "kind": "transparent"
    },
    {
      "address": "0x5BC12F31E5Dd4B09ED35eD7bEa61D65505c7D92c",
      "txHash": "0x87177896ca757fe93df7572711e53094323ea4f574e5e37a1c858369398b087b",
      "kind": "transparent"
    },
    {
      "address": "0x28e8b6183272D7582A24Fa7B143009D0ac843662",
      "txHash": "0x788928ed59230551df202d09d70eb93b123ea7627a781baadb92a4227ef40095",
      "kind": "transparent"
    },
    {
      "address": "0x71Dc05AF592bB6Ddf577926aDe8bA03E974A6b8b",
      "txHash": "0x55a4868fef560376878901363dac435472bb82ac7177cbbd67cc4a3fc4a21165",
      "kind": "transparent"
    },
    {
      "address": "0x9e5DC535074017f414d5183B3114E1Bf6F7880A1",
      "txHash": "0xfbd1a05ca43d69d0080f85633b91527511b17351837386e40257890f212bb6bf",
      "kind": "transparent"
    },
    {
      "address": "0x7c258c50b56356c2EE07F68dE77Ccad11A854cdA",
      "txHash": "0x6415d7e50dbefe05344873aaabcb2d26ca07b2b8a057e2941966f792d517c299",
      "kind": "transparent"
    },
    {
      "address": "0xe7733885868fEA65CeB7e8a45F4f0B32cD40D37e",
      "txHash": "0x394be7be9e8a7e75514a3dbcac224a166412d7e34d1af88ebf33ea2e7686457a",
      "kind": "transparent"
    }
  ],
  "impls": {
    "4b873d2431626e7b8b7f25c801720314173fafdabde488a547130bb1da3f4c00": {
      "address": "0xA750676641b161658C3b747478de7C6D080495C8",
      "txHash": "0x1a39ff1d2a99708e9ef075e84cc6ca51be77bad7af9c1db7129cb2d6d4eea12d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:45"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol:317"
          },
          {
            "contract": "ERC20BurnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol:50"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC20PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol:39"
          },
          {
            "contract": "ERC20PresetMinterPauserUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/presets/ERC20PresetMinterPauser.sol:106"
          },
          {
            "contract": "Fidu",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/Fidu.sol:21"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "56564fc6ff18a62c8509ace4ea7cebd77dc4b8801d6e4dfbf619ae0b8376cab2": {
      "address": "0x19fa20D3fD08959f0DA35adF65dC0e57D0B004Fa",
      "txHash": "0xd197c72a72d363f97c32766a8e310d1028e4c4a762c465a84cf555e80db1f489",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "PoolTokens",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/PoolTokens.sol:19"
          },
          {
            "contract": "PoolTokens",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(TokenInfo)10238_storage)",
            "src": "contracts/protocol/core/PoolTokens.sol:29"
          },
          {
            "contract": "PoolTokens",
            "label": "pools",
            "type": "t_mapping(t_address,t_struct(PoolInfo)20100_storage)",
            "src": "contracts/protocol/core/PoolTokens.sol:31"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(TokenInfo)10238_storage)": {
            "label": "mapping(uint256 => struct IPoolTokens.TokenInfo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(TokenInfo)10238_storage": {
            "label": "struct IPoolTokens.TokenInfo",
            "members": [
              {
                "label": "pool",
                "type": "t_address"
              },
              {
                "label": "tranche",
                "type": "t_uint256"
              },
              {
                "label": "principalAmount",
                "type": "t_uint256"
              },
              {
                "label": "principalRedeemed",
                "type": "t_uint256"
              },
              {
                "label": "interestRedeemed",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(PoolInfo)20100_storage)": {
            "label": "mapping(address => struct PoolTokens.PoolInfo)"
          },
          "t_struct(PoolInfo)20100_storage": {
            "label": "struct PoolTokens.PoolInfo",
            "members": [
              {
                "label": "totalMinted",
                "type": "t_uint256"
              },
              {
                "label": "totalPrincipalRedeemed",
                "type": "t_uint256"
              },
              {
                "label": "created",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "576e96714aceba3f49693bea6316615bc91fa7d4f23f0db0a47626cf18e29cc5": {
      "address": "0xE79DE3DD6E3622bCBA278303b754CD1069e39B75",
      "txHash": "0x09ef394f2b6eb839a77674aa6ba9db3ef0e4d34913c03965d2a27cfab1afdd4f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:28"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "poolTokenPositions",
            "type": "t_mapping(t_uint256,t_struct(PoolTokenPosition)27850_storage)",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:43"
          },
          {
            "contract": "TransferRestrictedVault",
            "label": "fiduPositions",
            "type": "t_mapping(t_uint256,t_struct(FiduPosition)27855_storage)",
            "src": "contracts/protocol/periphery/TransferRestrictedVault.sol:45"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(PoolTokenPosition)27850_storage)": {
            "label": "mapping(uint256 => struct TransferRestrictedVault.PoolTokenPosition)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(PoolTokenPosition)27850_storage": {
            "label": "struct TransferRestrictedVault.PoolTokenPosition",
            "members": [
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(FiduPosition)27855_storage)": {
            "label": "mapping(uint256 => struct TransferRestrictedVault.FiduPosition)"
          },
          "t_struct(FiduPosition)27855_storage": {
            "label": "struct TransferRestrictedVault.FiduPosition",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "b2b815dc93c70a6c323d2941b6c5dbe6a27c77e90e9d7d0de21a65e4b05a4831": {
      "address": "0x1dEDef62897a427E2621554aE416B22932f78800",
      "txHash": "0x80b273656dda06ddc566090b96a8ffd2cb908734398e08febdf1dcf5a752b30f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "IPool",
            "label": "sharePrice",
            "type": "t_uint256",
            "src": "contracts/interfaces/IPool.sol:7"
          },
          {
            "contract": "Pool",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/Pool.sol:17"
          },
          {
            "contract": "Pool",
            "label": "compoundBalance",
            "type": "t_uint256",
            "src": "contracts/protocol/core/Pool.sol:20"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "5524bcde26e1189547a96f3e452821095eac2d8a1b11d4117a2390ced7a78eb8": {
      "address": "0x9b186630791bdCeD2eE81fa6B8A464920c864657",
      "txHash": "0x2b45caa4d155bb351be7b9bc115ae9a627d9ce5848eb8ae5bef1ca3d336a7a40",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "ICreditDesk",
            "label": "totalWritedowns",
            "type": "t_uint256",
            "src": "contracts/interfaces/ICreditDesk.sol:7"
          },
          {
            "contract": "ICreditDesk",
            "label": "totalLoansOutstanding",
            "type": "t_uint256",
            "src": "contracts/interfaces/ICreditDesk.sol:8"
          },
          {
            "contract": "CreditDesk",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/CreditDesk.sol:23"
          },
          {
            "contract": "CreditDesk",
            "label": "underwriters",
            "type": "t_mapping(t_address,t_struct(Underwriter)13028_storage)",
            "src": "contracts/protocol/core/CreditDesk.sol:47"
          },
          {
            "contract": "CreditDesk",
            "label": "borrowers",
            "type": "t_mapping(t_address,t_struct(Borrower)13032_storage)",
            "src": "contracts/protocol/core/CreditDesk.sol:48"
          },
          {
            "contract": "CreditDesk",
            "label": "creditLines",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/protocol/core/CreditDesk.sol:49"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_address,t_struct(Underwriter)13028_storage)": {
            "label": "mapping(address => struct CreditDesk.Underwriter)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Underwriter)13028_storage": {
            "label": "struct CreditDesk.Underwriter",
            "members": [
              {
                "label": "governanceLimit",
                "type": "t_uint256"
              },
              {
                "label": "creditLines",
                "type": "t_array(t_address)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_struct(Borrower)13032_storage)": {
            "label": "mapping(address => struct CreditDesk.Borrower)"
          },
          "t_struct(Borrower)13032_storage": {
            "label": "struct CreditDesk.Borrower",
            "members": [
              {
                "label": "creditLines",
                "type": "t_array(t_address)dyn_storage"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "48c5664764b8f17b8962d2cdc988a76c6e581f1fd700fa8367a07e974cb7cc07": {
      "address": "0x0786B47650b3777f4CCd69dF84d16d43d0b35051",
      "txHash": "0xf8e1a7207fb43b5e6f6996c1e82df1c1b614f8ec968a4ae7c493f6f54c32cc80",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "ISeniorPool",
            "label": "sharePrice",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:9"
          },
          {
            "contract": "ISeniorPool",
            "label": "totalLoansOutstanding",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:10"
          },
          {
            "contract": "ISeniorPool",
            "label": "totalWritedowns",
            "type": "t_uint256",
            "src": "contracts/interfaces/ISeniorPool.sol:11"
          },
          {
            "contract": "SeniorPool",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/SeniorPool.sol:22"
          },
          {
            "contract": "SeniorPool",
            "label": "compoundBalance",
            "type": "t_uint256",
            "src": "contracts/protocol/core/SeniorPool.sol:28"
          },
          {
            "contract": "SeniorPool",
            "label": "writedowns",
            "type": "t_mapping(t_contract(ITranchedPool)10674,t_uint256)",
            "src": "contracts/protocol/core/SeniorPool.sol:29"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_contract(ITranchedPool)10674,t_uint256)": {
            "label": "mapping(contract ITranchedPool => uint256)"
          },
          "t_contract(ITranchedPool)10674": {
            "label": "contract ITranchedPool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "2a132555a31f8d77526933591abc33e530407f40bb2e0e93bc53f57685ea1b7c": {
      "address": "0x3ee79f3D97b3739a3994309693A207775A13E7D3",
      "txHash": "0xfb78898fb9fafc6a8ad902eafe209c200488ca9dbc70c4428d859e78a3c5e59a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "GoldfinchFactory",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/GoldfinchFactory.sol:20"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "c5147916f825981fe3816eb1f755857503a4d324f046f27ffe334f09a3611938": {
      "address": "0x53d4377dBC9965FE7faef28b365B7B66Bb51D907",
      "txHash": "0xbd2cd34d5c9109448cc84dc529f9496070f3683b37106e5ff9404ebe6e155cdf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "StakingRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/rewards/StakingRewards.sol:87"
          },
          {
            "contract": "StakingRewards",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:90"
          },
          {
            "contract": "StakingRewards",
            "label": "accumulatedRewardsPerToken",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:93"
          },
          {
            "contract": "StakingRewards",
            "label": "rewardsAvailable",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:96"
          },
          {
            "contract": "StakingRewards",
            "label": "positionToAccumulatedRewardsPerToken",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:99"
          },
          {
            "contract": "StakingRewards",
            "label": "targetCapacity",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:103"
          },
          {
            "contract": "StakingRewards",
            "label": "minRate",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:106"
          },
          {
            "contract": "StakingRewards",
            "label": "maxRate",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:109"
          },
          {
            "contract": "StakingRewards",
            "label": "maxRateAtPercent",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:113"
          },
          {
            "contract": "StakingRewards",
            "label": "minRateAtPercent",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:117"
          },
          {
            "contract": "StakingRewards",
            "label": "vestingLength",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:120"
          },
          {
            "contract": "StakingRewards",
            "label": "totalStakedSupply",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:128"
          },
          {
            "contract": "StakingRewards",
            "label": "totalLeveragedStakedSupply",
            "type": "t_uint256",
            "src": "contracts/rewards/StakingRewards.sol:131"
          },
          {
            "contract": "StakingRewards",
            "label": "leverageMultipliers",
            "type": "t_mapping(t_enum(LockupPeriod)32559,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:134"
          },
          {
            "contract": "StakingRewards",
            "label": "positions",
            "type": "t_mapping(t_uint256,t_struct(StakedPosition)32577_storage)",
            "src": "contracts/rewards/StakingRewards.sol:137"
          },
          {
            "contract": "StakingRewards",
            "label": "effectiveMultipliers",
            "type": "t_mapping(t_enum(StakedPositionType)32562,t_uint256)",
            "src": "contracts/rewards/StakingRewards.sol:141"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_enum(LockupPeriod)32559,t_uint256)": {
            "label": "mapping(enum StakingRewards.LockupPeriod => uint256)"
          },
          "t_enum(LockupPeriod)32559": {
            "label": "enum StakingRewards.LockupPeriod",
            "members": [
              "SixMonths",
              "TwelveMonths",
              "TwentyFourMonths"
            ]
          },
          "t_mapping(t_uint256,t_struct(StakedPosition)32577_storage)": {
            "label": "mapping(uint256 => struct StakingRewards.StakedPosition)"
          },
          "t_struct(StakedPosition)32577_storage": {
            "label": "struct StakingRewards.StakedPosition",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewards",
                "type": "t_struct(Rewards)11256_storage"
              },
              {
                "label": "leverageMultiplier",
                "type": "t_uint256"
              },
              {
                "label": "lockedUntil",
                "type": "t_uint256"
              },
              {
                "label": "positionType",
                "type": "t_enum(StakedPositionType)32562"
              },
              {
                "label": "unsafeEffectiveMultiplier",
                "type": "t_uint256"
              },
              {
                "label": "unsafeBaseTokenExchangeRate",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Rewards)11256_storage": {
            "label": "struct StakingRewardsVesting.Rewards",
            "members": [
              {
                "label": "totalUnvested",
                "type": "t_uint256"
              },
              {
                "label": "totalVested",
                "type": "t_uint256"
              },
              {
                "label": "totalPreviouslyVested",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_enum(StakedPositionType)32562": {
            "label": "enum StakingRewards.StakedPositionType",
            "members": [
              "Fidu",
              "CurveLP"
            ]
          },
          "t_mapping(t_enum(StakedPositionType)32562,t_uint256)": {
            "label": "mapping(enum StakingRewards.StakedPositionType => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "d57f23e97608988f68b0180cd473f276f1d55a804a264b24d7ac06562d3ab346": {
      "address": "0xBf84D3D1a455B106d663C35340A9b271f7f00522",
      "txHash": "0x4d32cd44dc5758bdbbed78c02782bf5787d742f7c2519023aeabe25edfaeb7c4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4313_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3838_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol:555"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ERC721PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Pausable.sol:40"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "_tokenIdTracker",
            "type": "t_struct(Counter)3518_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:48"
          },
          {
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "contracts/external/ERC721PresetMinterPauserAutoId.sol:86"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "CommunityRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/rewards/CommunityRewards.sol:33"
          },
          {
            "contract": "CommunityRewards",
            "label": "rewardsAvailable",
            "type": "t_uint256",
            "src": "contracts/rewards/CommunityRewards.sol:36"
          },
          {
            "contract": "CommunityRewards",
            "label": "tokenLaunchTimeInSeconds",
            "type": "t_uint256",
            "src": "contracts/rewards/CommunityRewards.sol:39"
          },
          {
            "contract": "CommunityRewards",
            "label": "grants",
            "type": "t_mapping(t_uint256,t_struct(Rewards)10882_storage)",
            "src": "contracts/rewards/CommunityRewards.sol:42"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Rewards)10882_storage)": {
            "label": "mapping(uint256 => struct CommunityRewardsVesting.Rewards)"
          },
          "t_struct(Rewards)10882_storage": {
            "label": "struct CommunityRewardsVesting.Rewards",
            "members": [
              {
                "label": "totalGranted",
                "type": "t_uint256"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "cliffLength",
                "type": "t_uint256"
              },
              {
                "label": "vestingInterval",
                "type": "t_uint256"
              },
              {
                "label": "revokedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3518_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_struct(UintSet)4313_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4313_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)3838_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3574_storage"
              }
            ]
          },
          "t_struct(Map)3574_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3566_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3566_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)3566_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          }
        }
      }
    },
    "5c0e1824808aec6e4f16ff9ed8f3086c7fc9b7e7e192f39197e9ca2b63e57380": {
      "address": "0x78181b0149367bEc5CFe46F6E60be2343E34A048",
      "txHash": "0xd0e5bf0161d8cabbd903242a8a86316f1a4e615baa628e2103e75d79d44beb35",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "gfi",
            "type": "t_address",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:15"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:16"
          },
          {
            "contract": "MerkleDirectDistributor",
            "label": "acceptedBitMap",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/rewards/MerkleDirectDistributor.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "a5477a5839e6b7e5ea32c3e4448678bd1e0abb689b48ae84d2e9de4dc6df1510": {
      "address": "0x20F6352f156458D8F906FC27C942E113d3b58a15",
      "txHash": "0x5db0dbe93578ad58d1adb86e590b91d5927a88942a5dc1bb18b8990005069770",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3395_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:25"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:89"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:24"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC1155PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:47"
          },
          {
            "contract": "ERC1155PresetPauserUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/external/ERC1155PresetPauserUpgradeable.sol:113"
          },
          {
            "contract": "UniqueIdentity",
            "label": "nonces",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/protocol/core/UniqueIdentity.sol:35"
          },
          {
            "contract": "UniqueIdentity",
            "label": "supportedUIDTypes",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/protocol/core/UniqueIdentity.sol:36"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3395_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)3395_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3094_storage"
              }
            ]
          },
          "t_struct(Set)3094_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)253_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          }
        }
      }
    },
    "68d43777ded85e394a5949485264cf31b27d24d744d9c4048ff5f5bb2c9ccb42": {
      "address": "0xFEa087DcD4dBd092eF9224353B6940682dC2484a",
      "txHash": "0xc5fc47f9e6044b9636c5541e7298c3abe4effca35fafa416a4bcba3e61eccee6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "Go",
            "label": "uniqueIdentity",
            "type": "t_address",
            "src": "contracts/protocol/core/Go.sol:16"
          },
          {
            "contract": "Go",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/Go.sol:20"
          },
          {
            "contract": "Go",
            "label": "legacyGoList",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/Go.sol:23"
          },
          {
            "contract": "Go",
            "label": "allIdTypes",
            "type": "t_array(t_uint256)11_storage",
            "src": "contracts/protocol/core/Go.sol:24"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_array(t_uint256)11_storage": {
            "label": "uint256[11]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "af0ea0a45900b8be8be2a88ad38012b8d35616a91c13e0a725a8019cc54eccff": {
      "address": "0xEefEd48062B8440b306C5459eFe5fe934F611269",
      "txHash": "0x7c6ff5dbc8c8f091e019c40678e94e42c01be3377ce7ec648d3bc9b4364f0619",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "BackerRewards",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/rewards/BackerRewards.sol:35"
          },
          {
            "contract": "BackerRewards",
            "label": "totalRewards",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:109"
          },
          {
            "contract": "BackerRewards",
            "label": "maxInterestDollarsEligible",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:112"
          },
          {
            "contract": "BackerRewards",
            "label": "totalInterestReceived",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:115"
          },
          {
            "contract": "BackerRewards",
            "label": "totalRewardPercentOfTotalGFI",
            "type": "t_uint256",
            "src": "contracts/rewards/BackerRewards.sol:118"
          },
          {
            "contract": "BackerRewards",
            "label": "tokens",
            "type": "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)29413_storage)",
            "src": "contracts/rewards/BackerRewards.sol:121"
          },
          {
            "contract": "BackerRewards",
            "label": "pools",
            "type": "t_mapping(t_address,t_struct(BackerRewardsInfo)29408_storage)",
            "src": "contracts/rewards/BackerRewards.sol:124"
          },
          {
            "contract": "BackerRewards",
            "label": "poolStakingRewards",
            "type": "t_mapping(t_contract(ITranchedPool)10674,t_struct(StakingRewardsPoolInfo)29421_storage)",
            "src": "contracts/rewards/BackerRewards.sol:127"
          },
          {
            "contract": "BackerRewards",
            "label": "tokenStakingRewards",
            "type": "t_mapping(t_uint256,t_struct(StakingRewardsTokenInfo)29435_storage)",
            "src": "contracts/rewards/BackerRewards.sol:130"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(BackerRewardsTokenInfo)29413_storage)": {
            "label": "mapping(uint256 => struct BackerRewards.BackerRewardsTokenInfo)"
          },
          "t_struct(BackerRewardsTokenInfo)29413_storage": {
            "label": "struct BackerRewards.BackerRewardsTokenInfo",
            "members": [
              {
                "label": "rewardsClaimed",
                "type": "t_uint256"
              },
              {
                "label": "accRewardsPerPrincipalDollarAtMint",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(BackerRewardsInfo)29408_storage)": {
            "label": "mapping(address => struct BackerRewards.BackerRewardsInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(BackerRewardsInfo)29408_storage": {
            "label": "struct BackerRewards.BackerRewardsInfo",
            "members": [
              {
                "label": "accRewardsPerPrincipalDollar",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_contract(ITranchedPool)10674,t_struct(StakingRewardsPoolInfo)29421_storage)": {
            "label": "mapping(contract ITranchedPool => struct BackerRewards.StakingRewardsPoolInfo)"
          },
          "t_contract(ITranchedPool)10674": {
            "label": "contract ITranchedPool"
          },
          "t_struct(StakingRewardsPoolInfo)29421_storage": {
            "label": "struct BackerRewards.StakingRewardsPoolInfo",
            "members": [
              {
                "label": "accumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "lastUpdateTime",
                "type": "t_uint256"
              },
              {
                "label": "slicesInfo",
                "type": "t_array(t_struct(StakingRewardsSliceInfo)29432_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(StakingRewardsSliceInfo)29432_storage)dyn_storage": {
            "label": "struct BackerRewards.StakingRewardsSliceInfo[]"
          },
          "t_struct(StakingRewardsSliceInfo)29432_storage": {
            "label": "struct BackerRewards.StakingRewardsSliceInfo",
            "members": [
              {
                "label": "fiduSharePriceAtDrawdown",
                "type": "t_uint256"
              },
              {
                "label": "principalDeployedAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "accumulatedRewardsPerTokenAtDrawdown",
                "type": "t_uint256"
              },
              {
                "label": "accumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              },
              {
                "label": "unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(StakingRewardsTokenInfo)29435_storage)": {
            "label": "mapping(uint256 => struct BackerRewards.StakingRewardsTokenInfo)"
          },
          "t_struct(StakingRewardsTokenInfo)29435_storage": {
            "label": "struct BackerRewards.StakingRewardsTokenInfo",
            "members": [
              {
                "label": "accumulatedRewardsPerTokenAtLastWithdraw",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    },
    "77bb60df5464b6ddc6ed1b8f105fc37478238795643b4f4b081c894e53f04516": {
      "address": "0xA1034F6996A90f17734424619A3e18eec0548d40",
      "txHash": "0x7b4772ab6516234af1ad304695462c23f9f03cdc3c3f9444ed4512e041427b76",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:58"
          },
          {
            "contract": "AccessControlUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol:210"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:26"
          },
          {
            "contract": "PausableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol:84"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "_notEntered",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:21"
          },
          {
            "contract": "ReentrancyGuardUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol:63"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap1",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:31"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap2",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:32"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap3",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:33"
          },
          {
            "contract": "BaseUpgradeablePausable",
            "label": "__gap4",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/protocol/core/BaseUpgradeablePausable.sol:34"
          },
          {
            "contract": "Zapper",
            "label": "config",
            "type": "t_contract(GoldfinchConfig)17603",
            "src": "contracts/protocol/core/Zapper.sol:22"
          },
          {
            "contract": "Zapper",
            "label": "tranchedPoolZaps",
            "type": "t_mapping(t_uint256,t_struct(Zap)26257_storage)",
            "src": "contracts/protocol/core/Zapper.sol:32"
          }
        ],
        "types": {
          "t_contract(GoldfinchConfig)17603": {
            "label": "contract GoldfinchConfig"
          },
          "t_mapping(t_uint256,t_struct(Zap)26257_storage)": {
            "label": "mapping(uint256 => struct Zapper.Zap)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Zap)26257_storage": {
            "label": "struct Zapper.Zap",
            "members": [
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "stakingPositionId",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)260_storage": {
            "label": "struct AccessControlUpgradeSafe.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4204_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4204_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4024_storage"
              }
            ]
          },
          "t_struct(Set)4024_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          }
        }
      }
    }
  }
}
